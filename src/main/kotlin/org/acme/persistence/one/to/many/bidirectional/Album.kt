package org.acme.persistence.one.to.many.bidirectional

import java.time.Duration
import java.time.LocalDate
import javax.persistence.CascadeType
import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.FetchType
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.JoinColumn
import javax.persistence.ManyToOne
import javax.persistence.OneToMany

@Entity
data class Album(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ALBUM_ID", nullable = false, updatable = false)
    var id: Long? = null,  // Set initially to null as it's generated by the DB

    var title: String,

    @Column(name = "RELEASE_DATE")
    var releaseDate: LocalDate,

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "BAND_ID") // Name of the column in the parent entity, denotes this is the owner of the relation
    var band: Band,

    @OneToMany(
        mappedBy = "album",  // Name of the field in the child Album which references this parent entity
        cascade = [CascadeType.ALL],  // Cascade any CRUD actions on this to songs too
        orphanRemoval = true
    )
    var songs: List<Song>,
) {
    private fun addSong(song: Song) = song.apply { songs += song }

    fun addNewSong(title: String, length: Duration) = addSong(Song(title = title, length = length, album = this))

    // Implement toString for bidirectional mappings, else you get a stack overflow due to data class's toString method
    override fun toString(): String {
        return "Album(id=$id, title='$title', releaseDate=$releaseDate, band=${band.name}, songs=$songs)"
    }
}
