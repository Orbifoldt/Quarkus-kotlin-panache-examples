package org.acme.persistence.one.to.many.unidirectional

import java.lang.IllegalStateException
import java.time.Duration
import java.time.LocalDate
import javax.persistence.CascadeType
import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.JoinColumn
import javax.persistence.OneToMany
import javax.persistence.Table

@Entity
@Table(name = "ALBUM_UNIDIRECTIONAL")
data class AlbumUnidirectional(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ALBUM_ID", nullable = false, updatable = false)
    var id: Long? = null,  // Set initially to null as it's generated by the DB

    var title: String,

    @Column(name = "RELEASE_DATE")
    var releaseDate: LocalDate,

    // Replaced the reference entity with just an ID
    @Column(name = "PARENT_BAND_ID") // We added PARENT_ to make explicit this column is a foreign key
    var bandId: Long, // This holds the reference to the parent (BAND_UNI) table, it's the column which gets joined

    @OneToMany(cascade = [CascadeType.ALL], orphanRemoval = true) // We removed the mappedBy as we use JoinColumn now
    @JoinColumn( // Now this entity is the owner of the relation
        name = "PARENT_ALBUM_ID",  // Column name in the child (SONG_UNI) table that references this entity
        referencedColumnName = "ALBUM_ID" // The precise column in this table that is referenced by above child column
    )
    var songs: List<SongUnidirectional>,
) {
    private fun addSong(song: SongUnidirectional) = song.apply { songs += song }

    fun addNewSong(title: String, length: Duration): SongUnidirectional {
        if (id == null) throw IllegalStateException("'id' is null, persist this before adding songs!")
        return addSong(SongUnidirectional(title = title, length = length, albumId = id!!))
    }
}
